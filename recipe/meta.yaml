{% set year = "2023" %}
{% set month = "10" %}
{% set day = "10" %}
{% set version = "1.75.0" %}

package:
  name: rust-split
  version: {{ version }}.dev{{ year }}{{ month }}{{ day }}

source:
  # Note! This source file specification is structured specifically to interact
  # well with the autotick bot. Importantly, the `patches:` block actually
  # applies to *all* of these inputs, not just the last one in the list, because
  # of the way that the YAML selector processing works.
  - url: https://static.rust-lang.org/dist/{{ year }}-{{ month }}-{{ day }}/rust-nightly-x86_64-unknown-linux-gnu.tar.gz  # [linux and x86_64]
    sha256: b2f7c5e7f6199d5109b92b1febaf7f36afd3eb31371c406aaf7dd3d51cd4c05e  # [linux and x86_64]
  - url: https://static.rust-lang.org/dist/{{ year }}-{{ month }}-{{ day }}/rust-nightly-aarch64-unknown-linux-gnu.tar.gz  # [aarch64]
    sha256: d767d17ec287ef06d7f076bf9bb6aa3ed4d5fdacdbb09246db03022ab5c44956  # [aarch64]
  - url: https://static.rust-lang.org/dist/{{ year }}-{{ month }}-{{ day }}/rust-nightly-powerpc64le-unknown-linux-gnu.tar.gz  # [ppc64le]
    sha256: cd17c9c9e7f60a44b2c387b818bfb72076b7a82ec10431159e4555023b59ffb6  # [ppc64le]
  - url: https://static.rust-lang.org/dist/{{ year }}-{{ month }}-{{ day }}/rust-nightly-x86_64-apple-darwin.tar.gz  # [osx and x86_64]
    sha256: 51483568d9886352a468ec1aa54aad91ae73c009a0e29e85d4c431bb5f3a23a1  # [osx and x86_64]
  - url: https://static.rust-lang.org/dist/{{ year }}-{{ month }}-{{ day }}/rust-nightly-aarch64-apple-darwin.tar.gz  # [osx and arm64]
    sha256: e7ee248652285996bd9c2178905d6bc6c6d5812ed07178520fd21006ea5df165  # [osx and arm64]
  - url: https://static.rust-lang.org/dist/{{ year }}-{{ month }}-{{ day }}/rust-nightly-x86_64-pc-windows-msvc.tar.gz  # [win64]
    sha256: a5f94e134a105ebf131229460213889b2c54cf64166566e858113573424f494e  # [win64]
    patches:
      - 0001-gh-106-install.sh-Perfomance-Use-more-shell-builtins.diff
  # End of block of primary source files.
  - url: https://static.rust-lang.org/dist/{{ year }}-{{ month }}-{{ day }}/rust-src-nightly.tar.gz
    sha256: eb931e527253efa5980c708d0df96a32da49aa76edcfd92694f4981ccfd322d6
    folder: rust-src
  - url: https://static.rust-lang.org/dist/{{ year }}-{{ month }}-{{ day }}/rust-std-nightly-aarch64-apple-ios.tar.gz  # [(linux or win) and x86_64]
    sha256: 10a5ce359e4ecdf15f2bbd6b4e500fa04db2a795a3836c4ff82362a76f778881  # [(linux or win) and x86_64]
    folder: rust-std  # [(linux or win) and x86_64]
  - url: https://static.rust-lang.org/dist/{{ year }}-{{ month }}-{{ day }}/rust-std-nightly-x86_64-apple-ios.tar.gz  # [(linux or win) and x86_64]
    sha256: 620a173a827b7979c1d7eab4c36dc87fe019e5bcb3a1ba7d819de79623d98ea2  # [(linux or win) and x86_64]
    folder: rust-std  # [(linux or win) and x86_64]
  - url: https://static.rust-lang.org/dist/{{ year }}-{{ month }}-{{ day }}/rust-std-nightly-aarch64-apple-ios-sim.tar.gz  # [(linux or win) and x86_64]
    sha256: cabd7c880d2d15738a3bd91d57adea145b3afe518332b096574d71fe0bfb9086  # [(linux or win) and x86_64]
    folder: rust-std  # [(linux or win) and x86_64]
  - url: https://static.rust-lang.org/dist/{{ year }}-{{ month }}-{{ day }}/rust-std-nightly-aarch64-linux-android.tar.gz  # [(linux or win) and x86_64]
    sha256: d4433497e89f62e4a8c93b6b6da4e647e8fa1195db5516bb65974e69138fbfc4  # [(linux or win) and x86_64]
    folder: rust-std  # [(linux or win) and x86_64]
  - url: https://static.rust-lang.org/dist/{{ year }}-{{ month }}-{{ day }}/rust-std-nightly-arm-linux-androideabi.tar.gz  # [(linux or win) and x86_64]
    sha256: d85ca48d7cf1b290ad1e850bab907924074a7b3e1ccf46aa1bf8d16cd7e54f0c  # [(linux or win) and x86_64]
    folder: rust-std  # [(linux or win) and x86_64]
  - url: https://static.rust-lang.org/dist/{{ year }}-{{ month }}-{{ day }}/rust-std-nightly-armv7-linux-androideabi.tar.gz  # [(linux or win) and x86_64]
    sha256: bd2ecb972286d830826dddbdf913b86c197f00c9b5364e0795d891bbf6406130  # [(linux or win) and x86_64]
    folder: rust-std  # [(linux or win) and x86_64]
  - url: https://static.rust-lang.org/dist/{{ year }}-{{ month }}-{{ day }}/rust-std-nightly-i686-linux-android.tar.gz  # [(linux or win) and x86_64]
    sha256: 60869ed3a198e9979c667e746193c2926fddb94b672475f9a4c0f35b7a4dfe91  # [(linux or win) and x86_64]
    folder: rust-std  # [(linux or win) and x86_64]
  - url: https://static.rust-lang.org/dist/{{ year }}-{{ month }}-{{ day }}/rust-std-nightly-x86_64-linux-android.tar.gz  # [(linux or win) and x86_64]
    sha256: 096797c20b71d899dfbda4bf72b3cd6e541e0e301eb344b8508f629efcb0d079  # [(linux or win) and x86_64]
    folder: rust-std  # [(linux or win) and x86_64]
  - url: https://static.rust-lang.org/dist/{{ year }}-{{ month }}-{{ day }}/rust-std-nightly-wasm32-unknown-unknown.tar.gz  # [(linux or win) and x86_64]
    sha256: ddb22e4c9e8b65f805c0d1a5f0c491d9bee063e5ac0a48ed706e39e28297c1b7  # [(linux or win) and x86_64]
    folder: rust-std  # [(linux or win) and x86_64]
  - url: https://static.rust-lang.org/dist/{{ year }}-{{ month }}-{{ day }}/rust-std-nightly-x86_64-pc-windows-msvc.tar.gz  # [(linux or win) and x86_64]
    sha256: 545072750069c590951671bb9e30b94de08a9ef24f2d1ea2170c7ccd7ad9f364
    folder: rust-std  # [(linux or win) and x86_64]

build:
  number: 1

requirements:
  build:
    - posix  # [build_platform == "win-64"]
  host:

outputs:
  - name: rust-std-{{ rust_arch }}
    build:
      noarch: generic
      binary_relocation: false
      missing_dso_whitelist:   # [linux]
        - /lib64/librt.so.1  # [linux]
        - /lib64/libdl.so.2  # [linux]
        - /lib64/libpthread.so.0  # [linux]
        - /lib64/libm.so.6  # [linux]
        - /lib64/libc.so.6  # [linux]
        - /lib64/ld-linux-x86-64.so.2  # [linux]
      merge_build_host: false
    requirements:
      build:
        - posix  # [build_platform == "win-64"]
      host:
      run:
      run_constrained:
        # Having different versions of rust-std and rust is confusing.
        - {{ pin_subpackage("rust", min_pin="x.x.x", max_pin="x.x.x") }}
    script: install-rust-std.sh  # [unix]
    script: install-rust-std.bat  # [win]
    test:
      commands:
        - test -d $PREFIX/lib/rustlib   # [unix]
        - if not exist %LIBRARY_PREFIX%/lib/rustlib exit 1  # [win]
        - echo {{ rust_arch }}

  - name: rust
    script: install-rust.sh  # [unix]
    script: install-rust.bat  # [win]
    build:
      # the distributed binaries are already relocatable
      binary_relocation: false
      missing_dso_whitelist:   # [linux]
        - /lib64/librt.so.1  # [linux]
        - /lib64/libdl.so.2  # [linux]
        - /lib64/libpthread.so.0  # [linux]
        - /lib64/libm.so.6  # [linux]
        - /lib64/libc.so.6  # [linux]
        - /lib64/ld-linux-x86-64.so.2  # [linux]
        # Added as run deps: libgcc-ng (via compiler strong run_exports), zlib
        # - /lib64/libgcc_s.so.1  # [linux]
        # - /lib64/libz.so.1  # [linux]
    run_exports:
      strong_constrains:
        - __osx >={{ MACOSX_DEPLOYMENT_TARGET|default("10.9") }}  # [osx and x86_64]
    requirements:
      build:
        - posix  # [build_platform == "win-64"]
      host:
        - {{ pin_subpackage("rust-std-" ~ rust_arch, exact=True) }}
        - {{ compiler('c') }}  # [linux] -- rustc needs a toolchain to link executables
        # zlib is linked by **/lib/libLLVM-*-rust-*.so
        - zlib  # [linux]
      run:
        - {{ pin_subpackage("rust-std-" ~ rust_arch, exact=True) }}
        - gcc_impl_{{ target_platform }}  # [linux]
    test:
      requires:
        - posix  # [build_platform == "win-64"]
      commands:
        - rustc --help
        - rustdoc --help
        - cargo --help
        - rustc --version
        - rustc --version | grep "rustc {{ '.'.join(version.split('.')[:3]) }}"  # [unix]
        - cargo --config registries.crates-io.protocol=\"sparse\" install --force xsv
        - echo {{ rust_arch }}
        - if exist %LIBRARY_PREFIX%\share\doc\rust\html\sysroot exit 1  # [win]

  - name: rust-src
    script: install-rust-src.sh  # [unix]
    script: install-rust-src.bat  # [win]
    build:
      skip: {{ rust_arch != "x86_64-unknown-linux-gnu" and rust_arch != "x86_64-pc-windows-msvc" }}
      noarch: generic
      # Need conda-build >=3.25 to have different hashes. Remove when conda-build 3.25 is out.
      string: unix_{{ PKG_BUILDNUM }}  # [unix]
      string: win_{{ PKG_BUILDNUM }}  # [win]
    requirements:
      build:
        - posix  # [win]
      run:
        - __win   # [win]
        - __unix  # [unix]
      run_constrained:
        # Having different versions of rust-src and rust is confusing.
        # `rust-src` is specific to the toolchain in `rustup`,
        # and we would like to keep that behavior.
        - {{ pin_subpackage("rust", min_pin="x.x.x", max_pin="x.x.x") }}
    test:
      commands:
        - test -f "${PREFIX}"/lib/rustlib/src/rust/Cargo.lock  # [unix]
        - if not exist "%LIBRARY_PREFIX%/lib/rustlib/src/rust/Cargo.lock" exit 1  # [win]
        # Make sure that the outputs do not clobber with other rust components
        - test "$(ls "${PREFIX}"/lib/rustlib/)" = "$(printf "manifest-rust-src\nsrc")"  # [unix]
        - if not exist "%LIBRARY_PREFIX%/lib/rustlib/manifest-rust-src" exit 1  # [win]
        - if not exist "%LIBRARY_PREFIX%/lib/rustlib/src" exit 1  # [win]


  - name: rust-std-{{ rust_std_extra }}
    script: install-rust-std-extra.sh  # [unix]
    script: install-rust-std-extra.bat  # [win]
    build:
      skip: {{ rust_arch != "x86_64-unknown-linux-gnu" and rust_arch != "x86_64-pc-windows-msvc" }}
      noarch: generic
      # Need conda-build >=3.25 to have different hashes. Remove when conda-build 3.25 is out.
      string: unix_{{ PKG_BUILDNUM }}  # [unix]
      string: win_{{ PKG_BUILDNUM }}  # [win]
    requirements:
      build:
        - posix  # [win]
      run:
        - __win   # [win]
        - __unix  # [unix]
      run_constrained:
        # Having different versions of rust-std and rust is confusing.
        - {{ pin_subpackage("rust", min_pin="x.x.x", max_pin="x.x.x") }}
    test:
      commands:
        - test -d $PREFIX/lib/rustlib/{{ rust_std_extra }}  # [unix]
        - if not exist "%LIBRARY_PREFIX%/lib/rustlib/{{ rust_std_extra }}" exit 1  # [win]
        - test -f $PREFIX/lib/rustlib/manifest-rust-std-{{ rust_std_extra }}  # [unix]
        - if not exist "%LIBRARY_PREFIX%/lib/rustlib/manifest-rust-std-{{ rust_std_extra }}" exit 1  # [win]
        # Make sure that the outputs do not clobber with other rust components
        - test -z "$(ls "${PREFIX}"/lib/rustlib/ | grep -v {{ rust_std_extra }})"  # [unix]
        - dir /b "%LIBRARY_PREFIX%" | findstr /v "{{ rust_std_extra }}" >nul || exit 1  # [win]
        - echo {{ rust_std_extra }}

about:
  home: https://www.rust-lang.org
  license: MIT
  license_file:
    - LICENSE-APACHE
    - LICENSE-MIT
  summary: |
    Rust is a systems programming language that runs blazingly fast, prevents segfaults, and guarantees thread safety.
    This package provides the compiler (rustc) and the documentation utilities rustdoc.
  dev_url: https://doc.rust-lang.org/std/
  doc_url: https://www.rust-lang.org/en-US/documentation.html

extra:
  recipe-maintainers:
    - timkpaine
    - xhochy
    - johanneskoester
    - abhi18av
    - pkgw
    - dlaehnemann
    - isuruf
    - mbargull
